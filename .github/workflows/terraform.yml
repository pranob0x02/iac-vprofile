# This is a GitHub Actions workflow for Terraform
name: "Terraform CI/CD"
on:
  push:
    branches:
      - main
      - stage
    paths:
      - "terraform/**"
  pull_request:
    branches:
      - main

  workflow_dispatch:

env:
  # credentials for aws deployment
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # S3 bucket for Terraform state
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_REGION: us-east-1
  EKS_CLUSTER: gitops-eks

jobs:
  terraform:
    name: "Apply Terraform code changes"
    runs-on: ubuntu-latest
    # Set up defaults
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    #steps:
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out planfile
        continue-on-error: true

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      ## Apply changes to the infrastructure
      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile

      ##### Configure AWS Credentials
      - name: Configure AWS Credentials 1
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      #### get kubeconfig file
      - name: Get kubeconfig file
        id: getconfig
        if: steps.apply.outcome == 'success'
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}

      #### Install Ingress Controller
      - name: Install Ingress Controller
        if: steps.apply.outcome == 'success' && steps.getconfig.outcome == 'success'
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/aws/deploy.yaml
